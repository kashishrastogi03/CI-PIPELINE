name: Advanced Build, Test & Artifact Pipeline

on:
  push:
    branches:
      - develop
      - 'feature-*'
  pull_request:
    branches:
      - develop
      - 'feature-*'
  schedule:
    - cron: '30 11 * * 3,5' # Every Wednesday and Friday at 5 PM IST

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
      # 1. Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. Setup .NET SDK with Custom Install Directory
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          install-dir: C:\Users\kashishrastogi\dotnet # Custom directory

      # Optional: Verify .NET SDK installation
      - name: Verify .NET SDK
        run: dotnet --list-sdks

      # 3. Restore project dependencies
      - name: Restore Dependencies
        run: dotnet restore

      # 4. Generate Version Tag
      - name: Generate Version Tag
        id: version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          COMMIT_HASH=${GITHUB_SHA::7}
          if [[ $BRANCH_NAME == "develop" ]]; then
            VERSION_TAG="develop-latest"
          elif [[ $BRANCH_NAME == feature-* ]]; then
            VERSION_TAG="${BRANCH_NAME}-${COMMIT_HASH}"
          else
            VERSION_TAG="release-${BRANCH_NAME}-${COMMIT_HASH}"
          fi
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "Generated Version Tag: $VERSION_TAG"

      # 5. Build the solution
      - name: Build Solution
        run: dotnet build --configuration Debug --no-restore

      # 6. Static Code Analysis
      - name: Static Code Analysis
        run: dotnet format --verify-no-changes

      # 7. Run Unit Tests with Code Coverage
      - name: Run Unit Tests with Code Coverage
        continue-on-error: true
        run: |
          mkdir -p TestResults
          dotnet test --configuration Debug --no-build \
          --logger "trx;LogFileName=TestResults/test_results.trx" \
          --collect:"XPlat Code Coverage"

      # 8. List TestResults Directory
      - name: List TestResults Directory
        run: ls -la TestResults

      # 9. Upload Test Report Artifact
      - name: Upload Test Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ env.VERSION_TAG }}
          path: '**/TestResults/test_results.trx'

      # 10. Upload Code Coverage Artifact
      - name: Upload Code Coverage Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-${{ env.VERSION_TAG }}
          path: '**/coverage*.xml'

      # 11. Copy Build Output for Artifact
      - name: Copy Build Output
        run: |
          mkdir -p artifacts
          cp -r **/bin/Debug/* artifacts/

      # 12. Upload Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ env.VERSION_TAG }}
          path: artifacts/
