name: Advanced Build, Test & Artifact Pipeline

on:
  push:
    branches:
      - develop
      - 'feature-*'
  pull_request:
    branches:
      - develop
      - 'feature-*'
  schedule:
    - cron: '30 11 * * 3,5' # Every Wednesday and Friday at 5 PM IST

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
      # 1. Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. Cache NuGet Packages
      - name: Cache NuGet Packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}

      # 3. Setup .NET SDK with Custom Install Directory
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
        env:
          DOTNET_INSTALL_DIR: ${{ runner.temp }}/dotnet

      # Optional: Verify the installed SDK version
      - name: Verify .NET SDK
        run: ${{ runner.temp }}/dotnet/dotnet --list-sdks

      # 4. Restore project dependencies
      - name: Restore Dependencies
        run: ${{ runner.temp }}/dotnet/dotnet restore

      # 5. Generate Version Tag
      - name: Generate Version Tag
        id: version
        shell: pwsh
        run: |
          $BRANCH_NAME = "${{ github.ref }}" -replace '^refs/heads/', ''
          $COMMIT_HASH = "${{ github.sha }}".Substring(0, 7)
          if ($BRANCH_NAME -eq "develop") {
            $VERSION_TAG = "develop-latest"
          }
          elseif ($BRANCH_NAME -like "feature-*") {
            $VERSION_TAG = "$BRANCH_NAME-$COMMIT_HASH"
          }
          else {
            $VERSION_TAG = "release-$BRANCH_NAME-$COMMIT_HASH"
          }
          echo "VERSION_TAG=$VERSION_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "Generated Version Tag: $VERSION_TAG"

      # 6. Build the solution
      - name: Build Solution
        run: ${{ runner.temp }}/dotnet/dotnet build --configuration Debug --no-restore

      # 7. Static Code Analysis
      - name: Static Code Analysis
        run: ${{ runner.temp }}/dotnet/dotnet format --verify-no-changes

      # 8. Run Unit Tests with Code Coverage
      - name: Run Unit Tests with Code Coverage (XPlat)
        continue-on-error: true
        shell: pwsh
        run: |
          if (!(Test-Path -Path "TestResults")) {
            New-Item -ItemType Directory -Path "TestResults"
          }
          ${{ runner.temp }}/dotnet/dotnet test --configuration Debug --no-build `
          --logger "trx;LogFileName=TestResults/test_results.trx" `
          --collect:"XPlat Code Coverage"

      # 9. List TestResults directory
      - name: List TestResults Directory
        run: Get-ChildItem TestResults

      # 10. Upload Test Report Artifact
      - name: Upload Test Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ env.VERSION_TAG }}
          path: '**/TestResults/test_results.trx'

      # 11. Upload Code Coverage Artifact
      - name: Upload Code Coverage Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-${{ env.VERSION_TAG }}
          path: '**/coverage*.xml'

      # 12. Copy Build Output for Artifact
      - name: Copy Build Output for Artifact
        shell: pwsh
        run: |
          if (!(Test-Path -Path "artifacts")) {
            New-Item -ItemType Directory -Path "artifacts"
          }
          Copy-Item -Path "**/bin/Debug/*" -Destination "artifacts" -Recurse

      # 13. Upload Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ env.VERSION_TAG }}
          path: artifacts/
