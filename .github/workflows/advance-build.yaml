name: Advanced Build, Test & Artifact Pipeline

on:
  push: 
    branches:
      - develop
      - master
      - 'feature-*'
  pull_request:
    branches:
      - develop
      - 'feature-*'
  schedule:
    - cron: '30 11 * * 3,5' # Every Wednesday and Friday at 5 PM IST

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Cache NuGet Packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
        env:
          DOTNET_INSTALL_DIR: ${{ runner.temp }}/dotnet

      - name: Verify .NET SDK
        run: ${{ runner.temp }}/dotnet/dotnet --list-sdks

      - name: Restore Dependencies
        run: ${{ runner.temp }}/dotnet/dotnet restore

      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "SONAR_SCANNER_INSTALLED=$(dotnet tool list -g | grep sonarscanner)" >> $GITHUB_ENV

      - name: Start SonarQube Analysis
        run: |
          dotnet-sonarscanner begin /k:"kashishrastogi03_CI-PIPELINE" /o:"kashishrastogi" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths="**/coverage.cobertura.xml" /d:sonar.exclusions="**/Migrations/**,**/*.Generated.cs" 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Generate Version Tag
        id: version
        shell: bash
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          COMMIT_HASH=$(echo "${GITHUB_SHA}" | cut -c1-7)
          if [[ "$BRANCH_NAME" == "develop" ]]; then
            VERSION_TAG="develop-latest"
          elif [[ "$BRANCH_NAME" == feature-* ]]; then
            VERSION_TAG="$BRANCH_NAME-$COMMIT_HASH"
          else
            VERSION_TAG="release-$BRANCH_NAME-$COMMIT_HASH"
          fi
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Build Solution
        run: ${{ runner.temp }}/dotnet/dotnet build --configuration Debug --no-restore

      - name: Static Code Analysis
        run: ${{ runner.temp }}/dotnet/dotnet format --verify-no-changes || true

      - name: Run Unit Tests with Code Coverage (XPlat)
        continue-on-error: true
        shell: bash
        run: |
          mkdir -p TestResults
          ${{ runner.temp }}/dotnet/dotnet test --configuration Debug --no-build \
          --logger "trx;LogFileName=TestResults/test_results.trx" \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults

      - name: List TestResults Directory
        run: ls -la TestResults

      - name: End SonarQube Analysis
        run: |
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload Test Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ env.VERSION_TAG }}
          path: TestResults/test_results.trx

      - name: Upload Code Coverage Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-${{ env.VERSION_TAG }}
          path: '**/TestResults/**/coverage.cobertura.xml'

      - name: Copy Build Output for Artifact
        shell: bash
        run: |
          mkdir -p artifacts
          cp -r **/bin/Debug/* artifacts/

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ env.VERSION_TAG }}
          path: artifacts/

