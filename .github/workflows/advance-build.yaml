name: Advanced Build, Test & Artifact Pipeline

on:
  push: 
    branches:
      - develop
      - 'feature-*'
  pull_request:
    branches:
      - develop
      - 'feature-*'
  schedule:
    - cron: '30 11 * * 3,5' # Every Wednesday and Friday at 5 PM IST

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
      # 1. Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. Cache NuGet Packages
      - name: Cache NuGet Packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}

      # 3. Setup .NET SDK with Custom Install Directory
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
        env:
          DOTNET_INSTALL_DIR: ${{ runner.temp }}/dotnet

      # To verify the installed SDK version
      - name: Verify .NET SDK
        run: ${{ runner.temp }}/dotnet/dotnet --list-sdks

      # 4. Restore project dependencies
      - name: Restore Dependencies
        run: ${{ runner.temp }}/dotnet/dotnet restore

      # 5. Install SonarScanner
      - name: Install SonarScanner
        run: |
          dotnet tool update dotnet-sonarscanner --tool-path .
          echo "$(pwd)" >> $GITHUB_PATH
          chmod +x ./dotnet-sonarscanner

      # 6. Start SonarQube Analysis
      - name: Start SonarQube Analysis
        run: |
          ./dotnet-sonarscanner begin /k:"kashishrastogi03_CI-PIPELINE" /o:"kashishrastogi" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 7. Generate Version Tag
      - name: Generate Version Tag
        id: version
        shell: bash
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          COMMIT_HASH=$(echo "${GITHUB_SHA}" | cut -c1-7)
          if [[ "$BRANCH_NAME" == "develop" ]]; then
            VERSION_TAG="develop-latest"
          elif [[ "$BRANCH_NAME" == feature-* ]]; then
            VERSION_TAG="$BRANCH_NAME-$COMMIT_HASH"
          else
            VERSION_TAG="release-$BRANCH_NAME-$COMMIT_HASH"
          fi
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "Generated Version Tag: $VERSION_TAG"

      # 8. Build Solution
      - name: Build Solution
        run: ${{ runner.temp }}/dotnet/dotnet build --configuration Debug --no-restore

      # 9. Static Code Analysis
      - name: Static Code Analysis
        run: ${{ runner.temp }}/dotnet/dotnet format --verify-no-changes

      # 10. Run Unit Tests with Code Coverage
      - name: Run Unit Tests with Code Coverage (XPlat)
        continue-on-error: true
        shell: bash
        run: |
          mkdir -p TestResults
          ${{ runner.temp }}/dotnet/dotnet test --configuration Debug --no-build \
          --logger "trx;LogFileName=TestResults/test_results.trx" \
          --collect:"XPlat Code Coverage"

      # 11. List TestResults directory
      - name: List TestResults Directory
        run: ls -la TestResults

      # 12. End SonarQube Analysis
      - name: End SonarQube Analysis
        run: |
          ./dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 13. Upload Test Report Artifact
      - name: Upload Test Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ env.VERSION_TAG }}
          path: '**/TestResults/test_results.trx'

      # 14. Upload Code Coverage Artifact
      - name: Upload Code Coverage Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-${{ env.VERSION_TAG }}
          path: '**/coverage*.xml'

      # 15. Copy Build Output for Artifact
      - name: Copy Build Output for Artifact
        shell: bash
        run: |
          mkdir -p artifacts
          cp -r **/bin/Debug/* artifacts/

      # 16. Upload Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ env.VERSION_TAG }}
          path: artifacts/

      # 17. Send Email Notification on Build Failure
      - name: Send Email Notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.office365.com
          server_port: 587
          username: ${{ secrets.OUTLOOK_EMAIL }}
          password: ${{ secrets.OUTLOOK_PASSWORD }}
          subject: "Build Failure: ${{ env.VERSION_TAG }}"
          to: ${{ secrets.OUTLOOK_EMAIL }}
          from: ${{ secrets.OUTLOOK_EMAIL }}
          body: |
            Build Failed on branch: ${{ github.ref }}
            Commit Hash: ${{ github.sha }}
            Please check the pipeline logs.
          secure: true
