name: SonarCloud

on: 
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        run: |
          curl -fsSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 8.0
          echo "$HOME/.dotnet" >> $GITHUB_PATH
          echo "DOTNET_ROOT=$HOME/.dotnet" >> $GITHUB_ENV
          export DOTNET_ROOT=$HOME/.dotnet
          export PATH=$HOME/.dotnet:$PATH

      - name: Install SonarScanner for .NET
        run: |
          export PATH="$HOME/.dotnet/tools:$PATH"
          dotnet tool install --global dotnet-sonarscanner

      - name: Begin SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          export PATH="$HOME/.dotnet/tools:$PATH"
          dotnet sonarscanner begin /k:"kashishrastogi03_CI-PIPELINE" /o:"kashishrastogi03" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="coverage/coverage.opencover.xml"

      - name: Build Project
        run: dotnet build --configuration Debug

      - name: Run Tests & Generate Coverage
        run: |
          mkdir -p coverage
          dotnet test --configuration Debug --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Verify Coverage File Exists
        run: |
          echo "Listing files in coverage directory:"
          ls ./coverage
          if [ -z "$(find ./coverage -name 'coverage.opencover.xml')" ]; then
            echo "No coverage file found!"
            exit 1
          fi

      - name: Rename Coverage Report
        run: |
          report=$(find ./coverage -name "coverage.opencover.xml" | head -n 1)
          if [ -z "$report" ]; then
            echo "Coverage report not found!"
            exit 1
          fi
          echo "Found coverage report: $report"
          mv $report coverage/coverage.opencover.xml
          echo "Coverage report renamed to coverage/coverage.opencover.xml"

      - name: End SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          export PATH="$HOME/.dotnet/tools:$PATH"
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
